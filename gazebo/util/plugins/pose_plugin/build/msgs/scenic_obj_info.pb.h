// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scenic_obj_info.proto

#ifndef PROTOBUF_INCLUDED_scenic_5fobj_5finfo_2eproto
#define PROTOBUF_INCLUDED_scenic_5fobj_5finfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include "quaternion.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_scenic_5fobj_5finfo_2eproto 

namespace protobuf_scenic_5fobj_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_scenic_5fobj_5finfo_2eproto
namespace scenic_obj_info_msgs {
namespace msgs {
class ScenicObjectInfo;
class ScenicObjectInfoDefaultTypeInternal;
extern ScenicObjectInfoDefaultTypeInternal _ScenicObjectInfo_default_instance_;
}  // namespace msgs
}  // namespace scenic_obj_info_msgs
namespace google {
namespace protobuf {
template<> ::scenic_obj_info_msgs::msgs::ScenicObjectInfo* Arena::CreateMaybeMessage<::scenic_obj_info_msgs::msgs::ScenicObjectInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace scenic_obj_info_msgs {
namespace msgs {

// ===================================================================

class ScenicObjectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:scenic_obj_info_msgs.msgs.ScenicObjectInfo) */ {
 public:
  ScenicObjectInfo();
  virtual ~ScenicObjectInfo();

  ScenicObjectInfo(const ScenicObjectInfo& from);

  inline ScenicObjectInfo& operator=(const ScenicObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenicObjectInfo(ScenicObjectInfo&& from) noexcept
    : ScenicObjectInfo() {
    *this = ::std::move(from);
  }

  inline ScenicObjectInfo& operator=(ScenicObjectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenicObjectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScenicObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ScenicObjectInfo*>(
               &_ScenicObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ScenicObjectInfo* other);
  friend void swap(ScenicObjectInfo& a, ScenicObjectInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenicObjectInfo* New() const final {
    return CreateMaybeMessage<ScenicObjectInfo>(NULL);
  }

  ScenicObjectInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScenicObjectInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScenicObjectInfo& from);
  void MergeFrom(const ScenicObjectInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenicObjectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .gazebo.msgs.Vector3d position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::gazebo::msgs::Vector3d& _internal_position() const;
  public:
  const ::gazebo::msgs::Vector3d& position() const;
  ::gazebo::msgs::Vector3d* release_position();
  ::gazebo::msgs::Vector3d* mutable_position();
  void set_allocated_position(::gazebo::msgs::Vector3d* position);

  // required .gazebo.msgs.Quaternion orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  private:
  const ::gazebo::msgs::Quaternion& _internal_orientation() const;
  public:
  const ::gazebo::msgs::Quaternion& orientation() const;
  ::gazebo::msgs::Quaternion* release_orientation();
  ::gazebo::msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::gazebo::msgs::Quaternion* orientation);

  // required .gazebo.msgs.Vector3d angVelocity = 3;
  bool has_angvelocity() const;
  void clear_angvelocity();
  static const int kAngVelocityFieldNumber = 3;
  private:
  const ::gazebo::msgs::Vector3d& _internal_angvelocity() const;
  public:
  const ::gazebo::msgs::Vector3d& angvelocity() const;
  ::gazebo::msgs::Vector3d* release_angvelocity();
  ::gazebo::msgs::Vector3d* mutable_angvelocity();
  void set_allocated_angvelocity(::gazebo::msgs::Vector3d* angvelocity);

  // required .gazebo.msgs.Vector3d linVelocity = 4;
  bool has_linvelocity() const;
  void clear_linvelocity();
  static const int kLinVelocityFieldNumber = 4;
  private:
  const ::gazebo::msgs::Vector3d& _internal_linvelocity() const;
  public:
  const ::gazebo::msgs::Vector3d& linvelocity() const;
  ::gazebo::msgs::Vector3d* release_linvelocity();
  ::gazebo::msgs::Vector3d* mutable_linvelocity();
  void set_allocated_linvelocity(::gazebo::msgs::Vector3d* linvelocity);

  // @@protoc_insertion_point(class_scope:scenic_obj_info_msgs.msgs.ScenicObjectInfo)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_angvelocity();
  void clear_has_angvelocity();
  void set_has_linvelocity();
  void clear_has_linvelocity();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::gazebo::msgs::Vector3d* position_;
  ::gazebo::msgs::Quaternion* orientation_;
  ::gazebo::msgs::Vector3d* angvelocity_;
  ::gazebo::msgs::Vector3d* linvelocity_;
  friend struct ::protobuf_scenic_5fobj_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScenicObjectInfo

// required .gazebo.msgs.Vector3d position = 1;
inline bool ScenicObjectInfo::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScenicObjectInfo::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScenicObjectInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector3d& ScenicObjectInfo::_internal_position() const {
  return *position_;
}
inline const ::gazebo::msgs::Vector3d& ScenicObjectInfo::position() const {
  const ::gazebo::msgs::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:scenic_obj_info_msgs.msgs.ScenicObjectInfo.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* ScenicObjectInfo::release_position() {
  // @@protoc_insertion_point(field_release:scenic_obj_info_msgs.msgs.ScenicObjectInfo.position)
  clear_has_position();
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* ScenicObjectInfo::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:scenic_obj_info_msgs.msgs.ScenicObjectInfo.position)
  return position_;
}
inline void ScenicObjectInfo::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:scenic_obj_info_msgs.msgs.ScenicObjectInfo.position)
}

// required .gazebo.msgs.Quaternion orientation = 2;
inline bool ScenicObjectInfo::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScenicObjectInfo::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScenicObjectInfo::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::gazebo::msgs::Quaternion& ScenicObjectInfo::_internal_orientation() const {
  return *orientation_;
}
inline const ::gazebo::msgs::Quaternion& ScenicObjectInfo::orientation() const {
  const ::gazebo::msgs::Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:scenic_obj_info_msgs.msgs.ScenicObjectInfo.orientation)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Quaternion*>(
      &::gazebo::msgs::_Quaternion_default_instance_);
}
inline ::gazebo::msgs::Quaternion* ScenicObjectInfo::release_orientation() {
  // @@protoc_insertion_point(field_release:scenic_obj_info_msgs.msgs.ScenicObjectInfo.orientation)
  clear_has_orientation();
  ::gazebo::msgs::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Quaternion* ScenicObjectInfo::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:scenic_obj_info_msgs.msgs.ScenicObjectInfo.orientation)
  return orientation_;
}
inline void ScenicObjectInfo::set_allocated_orientation(::gazebo::msgs::Quaternion* orientation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      orientation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:scenic_obj_info_msgs.msgs.ScenicObjectInfo.orientation)
}

// required .gazebo.msgs.Vector3d angVelocity = 3;
inline bool ScenicObjectInfo::has_angvelocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScenicObjectInfo::set_has_angvelocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScenicObjectInfo::clear_has_angvelocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::gazebo::msgs::Vector3d& ScenicObjectInfo::_internal_angvelocity() const {
  return *angvelocity_;
}
inline const ::gazebo::msgs::Vector3d& ScenicObjectInfo::angvelocity() const {
  const ::gazebo::msgs::Vector3d* p = angvelocity_;
  // @@protoc_insertion_point(field_get:scenic_obj_info_msgs.msgs.ScenicObjectInfo.angVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* ScenicObjectInfo::release_angvelocity() {
  // @@protoc_insertion_point(field_release:scenic_obj_info_msgs.msgs.ScenicObjectInfo.angVelocity)
  clear_has_angvelocity();
  ::gazebo::msgs::Vector3d* temp = angvelocity_;
  angvelocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* ScenicObjectInfo::mutable_angvelocity() {
  set_has_angvelocity();
  if (angvelocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    angvelocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:scenic_obj_info_msgs.msgs.ScenicObjectInfo.angVelocity)
  return angvelocity_;
}
inline void ScenicObjectInfo::set_allocated_angvelocity(::gazebo::msgs::Vector3d* angvelocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(angvelocity_);
  }
  if (angvelocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      angvelocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, angvelocity, submessage_arena);
    }
    set_has_angvelocity();
  } else {
    clear_has_angvelocity();
  }
  angvelocity_ = angvelocity;
  // @@protoc_insertion_point(field_set_allocated:scenic_obj_info_msgs.msgs.ScenicObjectInfo.angVelocity)
}

// required .gazebo.msgs.Vector3d linVelocity = 4;
inline bool ScenicObjectInfo::has_linvelocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScenicObjectInfo::set_has_linvelocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScenicObjectInfo::clear_has_linvelocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::gazebo::msgs::Vector3d& ScenicObjectInfo::_internal_linvelocity() const {
  return *linvelocity_;
}
inline const ::gazebo::msgs::Vector3d& ScenicObjectInfo::linvelocity() const {
  const ::gazebo::msgs::Vector3d* p = linvelocity_;
  // @@protoc_insertion_point(field_get:scenic_obj_info_msgs.msgs.ScenicObjectInfo.linVelocity)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* ScenicObjectInfo::release_linvelocity() {
  // @@protoc_insertion_point(field_release:scenic_obj_info_msgs.msgs.ScenicObjectInfo.linVelocity)
  clear_has_linvelocity();
  ::gazebo::msgs::Vector3d* temp = linvelocity_;
  linvelocity_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* ScenicObjectInfo::mutable_linvelocity() {
  set_has_linvelocity();
  if (linvelocity_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    linvelocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:scenic_obj_info_msgs.msgs.ScenicObjectInfo.linVelocity)
  return linvelocity_;
}
inline void ScenicObjectInfo::set_allocated_linvelocity(::gazebo::msgs::Vector3d* linvelocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linvelocity_);
  }
  if (linvelocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linvelocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linvelocity, submessage_arena);
    }
    set_has_linvelocity();
  } else {
    clear_has_linvelocity();
  }
  linvelocity_ = linvelocity;
  // @@protoc_insertion_point(field_set_allocated:scenic_obj_info_msgs.msgs.ScenicObjectInfo.linVelocity)
}

// required string name = 5;
inline bool ScenicObjectInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScenicObjectInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScenicObjectInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScenicObjectInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ScenicObjectInfo::name() const {
  // @@protoc_insertion_point(field_get:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
  return name_.GetNoArena();
}
inline void ScenicObjectInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
}
#if LANG_CXX11
inline void ScenicObjectInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
}
#endif
inline void ScenicObjectInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
}
inline void ScenicObjectInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
}
inline ::std::string* ScenicObjectInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenicObjectInfo::release_name() {
  // @@protoc_insertion_point(field_release:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenicObjectInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:scenic_obj_info_msgs.msgs.ScenicObjectInfo.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace scenic_obj_info_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_scenic_5fobj_5finfo_2eproto
